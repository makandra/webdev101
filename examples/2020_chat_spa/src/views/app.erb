<!DOCTYPE html>
<html>

  <head>
    <meta content='text/html; charset=UTF-8' http-equiv='Content-Type'>
    <style>

      body {
        margin: 0;
        font-family: arial, helvetica, sans-serif;
        font-size: 22px;
        line-height: 26px;
        background-color: #cccccc;
        height: 100dvh;
      }

      main {
        height: 100%;
        display: flex;
        flex-direction: column;
      }

      .channel {
        flex: 1 1 0;
        overflow-y: scroll;
      }

      .message {
        background: #ffffcc;
        padding: 12px 14px;
        border-radius: 3px;
        margin: 15px;
        box-shadow: 0 1px 4px rgba(0, 0, 0, 0.2), inset 0 10px 10px rgba(255, 255, 255, 0.5);
      }

      form {
        margin: 0;
        flex: 0 0 70px;
        background-color: #666666;
        box-shadow: 0 0 8px rgba(0, 0, 0, 0.2);
      }

      input {
        height: 100%;
        width: 100%;
        box-sizing: border-box;
        border: none;
        border-top: 1px solid #999999;
        padding: 0 20px;
        font-size: 25px;
        font-family: arial, helvetica, sans-serif;
        color: #349;
      }

    </style>

  </head>

  <body>
    <script type="module">
      import { render } from 'https://esm.sh/preact@10.7.2'
      import { useState, useRef, useEffect } from 'https://esm.sh/preact@10.7.2/hooks'
      import { html } from 'https://esm.sh/htm@3.0.4/preact'

      function Chat() {
        const [messages, setMessages] = useState([])
        const [newMessage, setNewMessage] = useState('')
        const channelElement = useRef()

        function onSubmitMessage(event) {
          event.preventDefault()

          if (!newMessage) return
          setMessages([...messages, newMessage])

          fetch('/send', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ message: newMessage })
          })

          setNewMessage('')
        }

        useEffect(() => {
          let lastTimeout

          async function loadMessages() {
            const response = await fetch('/messages.json')
            if (response.ok) {
              const text = await response.text()
              setMessages(JSON.parse(text))
            }
            lastTimeout = setTimeout(loadMessages, 1000)
          }

          loadMessages()

          return () => clearTimeout(lastTimeout)
        }, [])

        useEffect(() => {
          if (channelElement.current) {
            console.debug("scrolling to %o", channelElement.current.scrollHeight)
            channelElement.current.scrollTop = channelElement.current.scrollHeight
          }
        }, [channelElement.current, messages])

        return html`
          <main>
            <div class="channel" ref=${channelElement}>
              ${messages.map((message) => html`<div class="message">${message}</div>`)}
            </div>

            <form onSubmit=${onSubmitMessage}>
              <input type="text" name="message" placeholder="Enter your message" autofocus autocomplete="off" value=${newMessage} onInput=${({ currentTarget }) => setNewMessage(currentTarget.value)} />
            </form>
          </main>`
        }

        render(html`<${Chat} />`, document.body)
    </script>

  </body>
</html>
